
环境变量的生效顺序

	/etc/profile → ~/.bash_profile → ~/.bashrc → /etc/bashrc → 命令提示符
	   |						  |
	   |						  |
	     → /etc/profile.d/*.sh ←—————————————————————
	     	       |
	     	       |
	    /etc/profile.d/lang.sh → /etc/sysc config/i18n
	    

配置文件内容
	abidingai@abidingai-W65KJ1-KK1:~$ cat /etc/profile
	# /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
	# and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

	if [ "${PS1-}" ]; then
	  if [ "${BASH-}" ] && [ "$BASH" != "/bin/sh" ]; then
	    # The file bash.bashrc already sets the default PS1.
	    # PS1='\h:\w\$ '
	    if [ -f /etc/bash.bashrc ]; then
	      # 这里的. 就是source的缩写，表示调用这个配置文件
	      . /etc/bash.bashrc
	    fi
	  else
	    #id为0的是root用户，它的权限提示符为#，普通用户为$
	    if [ "`id -u`" -eq 0 ]; then
	      PS1='# '
	    else
	      PS1='$ '
	    fi
	  fi
	fi
	
	#通过for循环调用/etc/profile.d目录下，所有以.sh结尾的文件
	if [ -d /etc/profile.d ]; then
	  for i in /etc/profile.d/*.sh; do
	    if [ -r $i ]; then
	      . $i
	    fi
	  done
	  unset i
	fi
	
	上述的内容是Ubuntu系统中的/ect/profile文件中的内容。下面记录的是教学视频的内容。
	/etc/profile文件的作用，定义了
		USER变量
		LOGNAME变量
		MAIL变量
		PATH变量
		HOSTNAME变量
		HISTSIZE变量
		UMASK值
		调用/etc/profile.d/*.sh文件
	另外，如果在这里修改了某些配置，那么对所有用户都生效。
	
	****************************************************************************
	
	这个文件可以看出它定义了 环境变量HISTSIZE、PS1以及一些命令的别名，并调用了. /etc/bash_completion
	同时还在环境环境变量中追加了 Anaconda3的环境变量
	abidingai@abidingai-W65KJ1-KK1:~$ cat .bashrc
	# ~/.bashrc: executed by bash(1) for non-login shells.
	# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
	# for examples

	# If not running interactively, don't do anything
	case $- in
	    *i*) ;;
	      *) return;;
	esac

	# don't put duplicate lines or lines starting with space in the history.
	# See bash(1) for more options
	HISTCONTROL=ignoreboth

	# append to the history file, don't overwrite it
	shopt -s histappend

	# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
	HISTSIZE=1000
	HISTFILESIZE=2000

	# check the window size after each command and, if necessary,
	# update the values of LINES and COLUMNS.
	shopt -s checkwinsize

	# If set, the pattern "**" used in a pathname expansion context will
	# match all files and zero or more directories and subdirectories.
	#shopt -s globstar

	# make less more friendly for non-text input files, see lesspipe(1)
	[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

	# set variable identifying the chroot you work in (used in the prompt below)
	if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	    debian_chroot=$(cat /etc/debian_chroot)
	fi

	# set a fancy prompt (non-color, unless we know we "want" color)
	case "$TERM" in
	    xterm-color|*-256color) color_prompt=yes;;
	esac

	# uncomment for a colored prompt, if the terminal has the capability; turned
	# off by default to not distract the user: the focus in a terminal window
	# should be on the output of commands, not on the prompt
	#force_color_prompt=yes

	if [ -n "$force_color_prompt" ]; then
	    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	    else
		color_prompt=
	    fi
	fi

	if [ "$color_prompt" = yes ]; then
	    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
	else
	    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
	fi
	unset color_prompt force_color_prompt

	# If this is an xterm set the title to user@host:dir
	case "$TERM" in
	xterm*|rxvt*)
	    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	    ;;
	*)
	    ;;
	esac

	# enable color support of ls and also add handy aliases
	if [ -x /usr/bin/dircolors ]; then
	    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	    alias ls='ls --color=auto'
	    #alias dir='dir --color=auto'
	    #alias vdir='vdir --color=auto'

	    alias grep='grep --color=auto'
	    alias fgrep='fgrep --color=auto'
	    alias egrep='egrep --color=auto'
	fi

	# colored GCC warnings and errors
	#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

	# some more ls aliases
	alias ll='ls -alF'
	alias la='ls -A'
	alias l='ls -CF'

	# Add an "alert" alias for long running commands.  Use like so:
	#   sleep 10; alert
	alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)"
	"$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

	# Alias definitions.
	# You may want to put all your additions into a separate file like
	# ~/.bash_aliases, instead of adding them here directly.
	# See /usr/share/doc/bash-doc/examples in the bash-doc package.

	if [ -f ~/.bash_aliases ]; then
	    . ~/.bash_aliases
	fi

	# enable programmable completion features (you don't need to enable
	# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
	# sources /etc/bash.bashrc).
	if ! shopt -oq posix; then
	  if [ -f /usr/share/bash-completion/bash_completion ]; then
	    . /usr/share/bash-completion/bash_completion
	  elif [ -f /etc/bash_completion ]; then
	    . /etc/bash_completion
	  fi
	fi

	# added by Anaconda3 installer
	export PATH="/home/abidingai/anaconda3/bin:$PATH"
	
	****************************************************************************
	
	abidingai@abidingai-W65KJ1-KK1:~$ cat /etc/bash.bashrc 
	# System-wide .bashrc file for interactive bash(1) shells.

	# To enable the settings / commands in this file for login shells as well,
	# this file has to be sourced in /etc/profile.

	# If not running interactively, don't do anything
	[ -z "$PS1" ] && return

	# check the window size after each command and, if necessary,
	# update the values of LINES and COLUMNS.
	shopt -s checkwinsize

	# set variable identifying the chroot you work in (used in the prompt below)
	if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	    debian_chroot=$(cat /etc/debian_chroot)
	fi

	# set a fancy prompt (non-color, overwrite the one in /etc/profile)
	# but only if not SUDOing and have SUDO_PS1 set; then assume smart user.
	if ! [ -n "${SUDO_USER}" -a -n "${SUDO_PS1}" ]; then
	  PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
	fi

	# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
	# If this is an xterm set the title to user@host:dir
	#case "$TERM" in
	#xterm*|rxvt*)
	#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
	#    ;;
	#*)
	#    ;;
	#esac

	# enable bash completion in interactive shells
	#if ! shopt -oq posix; then
	#  if [ -f /usr/share/bash-completion/bash_completion ]; then
	#    . /usr/share/bash-completion/bash_completion
	#  elif [ -f /etc/bash_completion ]; then
	#    . /etc/bash_completion
	#  fi
	#fi

	# sudo hint
	if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ] ; then
	    case " $(groups) " in *\ admin\ *|*\ sudo\ *)
	    if [ -x /usr/bin/sudo ]; then
		cat <<-EOF
		To run a command as administrator (user "root"), use "sudo <command>".
		See "man sudo_root" for details.
		
		EOF
	    fi
	    esac
	fi

	# if the command-not-found package is installed, use it
	if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
		function command_not_found_handle {
			# check because c-n-f could've been removed in the meantime
		        if [ -x /usr/lib/command-not-found ]; then
			   /usr/lib/command-not-found -- "$1"
		           return $?
		        elif [ -x /usr/share/command-not-found/command-not-found ]; then
			   /usr/share/command-not-found/command-not-found -- "$1"
		           return $?
			else
			   printf "%s: command not found\n" "$1" >&2
			   return 127
			fi
		}
	fi



	
	
	
	

